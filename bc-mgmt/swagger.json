{
  "swagger": "2.0",
  "info": {
    "title": "Blockchain Management API",
    "version": "1.0.0",
    "description": "The Blockchain Management API provides endpoints to manage your (fuel) wallets and smart contracts. Besides that it also provides endpoints to retrieve transaction information."
  },
  "host": "api.enco.io",
  "basePath": "/bc-mgmt/1.0.0",
  "tags": [
    {
      "name": "General",
      "description": "General endpoints"
    },
    {
      "name": "Wallets",
      "description": "Endpoints to manage your wallets and make transfers"
    },
    {
      "name": "Contracts",
      "description": "Endpoints to manage your smart contracts and make invocations on them"
    },
    {
      "name": "Block explorer",
      "description": "Endpoint to retrieve info about a certain transaction, address/wallet or block"
    },
    {
      "name": "Autocomplete",
      "description": "Endpoints to support autocompletion on the chains, wallets and contracts for the requested user"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "General"
        ],
        "description": "Checks whether the user has a subscription",
        "x-auth-type": "Application \u0026 Application User",
        "x-throttling-tier": "Unlimited",
        "responses": {
          "200": {
            "description": "The user has a subscription for this asset"
          },
          "403": {
            "description": "The user does not have a subscription for this asset"
          }
        }
      }
    },
    "/chains": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Retrieve available chains",
        "description": "First of all, this will return all the public chains we currently support at EnCo. If you have also created your own private chain(s) in the Blockchain-as-a-service API, these will also be returned. Last but not least you will also find the \"EnCo shared\" chain, which is a private Ethereum (POA) chain that we host and only available to EnCo users.",
        "responses": {
          "200": {
            "description": "All supported public chains and all private chains (if any) from the client",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/chain"
              }
            }
          }
        }
      }
    },
    "/chains/{chainName}/faucet/{walletIdentifier}": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "If you want to fund your wallet(s)",
        "description": "To actually do something on a blockchain, you need funds. A lot of test chains provide a faucet to request funds. We at EnCo also created a faucet to fund your wallets on the \"EnCo-shared chain\". If you request funds on a public test chain (for example Rinkeby), we will provide you the URL of the faucet (if available).",
        "responses": {
          "200": {
            "description": "The hash of the transaction where the wallet got funded",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "400": {
            "description": "When a validation check failed for a certain faucet, a detailed error message will be returned."
          },
          "404": {
            "description": "When the provided wallet doesn't belong to the requester. Only wallets that are linked to your EnCo account are allowed."
          },
          "429": {
            "description": "When you requested funds too often. You can nly fund a wallet once every 5 minutes"
          },
          "501" : {
            "description": "When you requested funds for a chain that is not managed by EnCo. In case a public faucet does exist, the url to it will be returned"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          },
          {
            "$ref": "#/parameters/fundingAmount"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Retrieve all your wallets on a chain",
        "description": "Use this endpoint to retrieve all your EnCo wallets on the specified chain. You can provide \"balanceUnit\" as query param to change the unit of \"balance\" in the response, the default value is WEI.",
        "responses": {
          "200": {
            "description": "Wallets from the client on the specified chain",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/wallet"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/balanceUnit"
          }
        ]
      },
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "If you want to create a new wallet",
        "description": "Use this endpoint to create a new (EnCo) wallet on the specified chain. You can give it a friendly name by passing the \"name\" query param, this name can be used as wallet identifier in other endpoints.",
        "responses": {
          "200": {
            "description": "Created wallet",
            "schema": {
              "$ref": "#/definitions/basicWallet"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/newWalletName"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets/archived": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Retrieve all your archived wallets on a chain",
        "description": "Use this endpoint to retrieve all your archived EnCo wallets on the specified chain.",
        "responses": {
          "200": {
            "description": "Archived wallets from the client",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/basicWallet"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets/{walletIdentifier}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Retrieve a specific wallet",
        "description": "You can request info about a specific wallet by specifying the name (only for wallets made on the EnCo platform) or the address. It's not necessary to own the wallet on the EnCo platform to call this endpoint.",
        "responses": {
          "200": {
            "description": "Info about the requested wallet",
            "schema": {
              "$ref": "#/definitions/wallet"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          },
          {
            "$ref": "#/parameters/balanceUnit"
          }
        ]
      },
      "put": {
        "tags": [
          "Wallets"
        ],
        "summary": "Rename your wallet",
        "description": "Use this endpoint to rename your wallet. Please make sure this wallet is yours and made on the EnCo platform.",
        "responses": {
          "200": {
            "description": "Wallet renamed",
            "schema": {
              "$ref": "#/definitions/basicWallet"
            }
          },
          "400": {
            "description": "If the walletIdentifier is invalid or if the new name is invalid or a wallet with the new name already exists."
          },
          "404": {
            "description": "If the walletIdentifier is a valid address but not managed on EnCo by this user."
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          },
          {
            "schema": {
              "$ref": "#/definitions/renameWallet"
            },
            "in": "body",
            "name": "Rename payload",
            "description": "Wallet rename request"
          }
        ]
      },
      "delete": {
        "tags": [
          "Wallets"
        ],
        "summary": "Delete your wallet",
        "description": "Use this endpoint to delete your wallet. Please note that this is a soft delete (archive).\nYou can still retrieve your archived wallets but you can't use archived wallets for other endpoint calls like transfers or exports.\nIf you do want to use an archived wallet, you first have to unarchive it at.",
        "responses": {
          "200": {
            "description": "Wallet successfully deleted"
          },
          "400" : {
            "description": "If the walletIdentifier is invalid"
          },
          "404": {
            "description": "If the walletIdentifier is a valid address but not managed on EnCo by this user."
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets/{walletIdentifier}/unarchive": {
      "put": {
        "tags": [
          "Wallets"
        ],
        "summary": "Restore a deleted wallet",
        "description": "If you want to make use of a deleted wallet again, you can unarchive it calling this endpoint. This is necessary if you want to use the wallet to make transfers, but also if you want to export the wallet itself.",
        "responses": {
          "200": {
            "description": "Unarchived wallet",
            "schema": {
              "$ref": "#/definitions/basicWallet"
            }
          },
          "404": {
            "description": "If the wallet could not be found in your archive or is not yours on the EnCo platform."
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletAddress"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets/{walletIdentifier}/transfer": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Make transfers",
        "description": "Use this resource to make transfers.",
        "responses": {
          "200": {
            "description": "Transaction",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "400": {
            "description": "If the transfer payload is missing or invalid"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          },
          {
            "schema": {
              "$ref": "#/definitions/transfer"
            },
            "name": "Transfer payload",
            "in": "body",
            "description": "Transfer funds request"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets/{walletIdentifier}/transfer/{transactionId}": {
      "put": {
        "tags": [
          "Wallets"
        ],
        "summary": "Update a transaction",
        "description": "Update a transaction as long as it is still in the transaction pool, this information could be found in the block explorer. This resource will mostly be used to increase the gasprice and or gaslimit (fees) to make sure your transaction will be picked up faster. When no gasLimit or gasPrice is provided, default values will be used.",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "400": {
            "description": "If an invalid wallet identifier or transaction hash is provided. Or if the gasPrice is not higher than the current one"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          },
          {
            "$ref": "#/parameters/transactionId"
          },
          {
            "schema": {
              "$ref": "#/definitions/transferUpdate"
            },
            "in": "body",
            "name": "Update payload",
            "description": "Transfer update request"
          }
        ]
      },
      "delete": {
        "tags": [
          "Wallets"
        ],
        "summary": "Cancel a transaction",
        "responses": {
          "200": {
            "description": "Cancel a transaction as long as it is still in the transaction pool. When no gasLimit or gasPrice is provided, default values will be used.",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "400": {
            "description": "If an invalid wallet identifier or transaction hash is provided. Or if the gasPrice is not higher than the current one"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          },
          {
            "$ref": "#/parameters/transactionId"
          },
          {
            "in": "query",
            "name": "gasPrice",
            "required": false,
            "type": "integer",
            "description": "Optional new gas price"
          },
          {
            "in": "query",
            "name": "gasLimit",
            "required": false,
            "type": "integer",
            "description": "Optional new gas limit"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets/{walletIdentifier}/key": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Export the private key",
        "description": "Use this resource to export the private key from the specified wallet. With this private key you can restore/reimport your wallet elsewhere.",
        "responses": {
          "200": {
            "description": "The public and private key pair",
            "schema": {
              "$ref": "#/definitions/publicPrivateKeyPair"
            }
          },
          "400": {
            "description": "If the wallet could not be found or is not yours on the EnCo platform."
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          }
        ]
      }
    },
    "/chains/{chainName}/wallets/{walletIdentifier}/export": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Export the wallet file and password",
        "description": "Use this resource to export your wallet to a wallet file and a password. With this file and password you can restore/reimport your wallet elsewhere.",
        "responses": {
          "200": {
            "description": "The exported wallet file and password",
            "schema": {
              "$ref": "#/definitions/exportedWallet"
            }
          },
          "400": {
            "description": "If the wallet could not be found or is not yours on the EnCo platform."
          }

        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/walletIdentifier"
          }
        ]
      }
    },
    "/chains/{chainName}/contracts": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieve all your contracts on a chain",
        "description": "Call this endpoints to retrieve all contracts you deployed or imported on the EnCo platform.",
        "responses": {
          "200": {
            "description": "A list of smart contracts on the EnCo platform accessible by the requester",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/contract"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          }
        ]
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Deploy/import a smart contract",
        "description": "You can use this resource to deploy a contract from scratch or import an existing contract.\nThe first option (deploy) is default when the \"deploy\" query param was not provided. You either have to provide the source code or the binary data & ABI.\nIf you want to import a contract, make sure to provide its contract address and the ABI or source code. Also set the \"deploy\" query param to 'false'",
        "responses": {
          "200": {
            "description": "Info about the deployed/imported contract",
            "schema": {
              "$ref": "#/definitions/contract"
            }
          },
          "400" : {
            "description": "If a contract with the same name already exists or an invalid name is provided. If the fromAddress is not managed by EnCo for this user"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/deploy"
          },
          {
            "schema": {
              "$ref": "#/definitions/contractDeployRequest"
            },
            "name": "Contract payload",
            "in": "body",
            "description": "Contract deploy/import request"
          }
        ]
      }
    },
    "/chains/{chainName}/contracts/{contractIdentifier}": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieve a specific contract",
        "description": "Use this resource to retrieve info about a specifc contract you deployed/imported earlier.",
        "responses": {
          "200": {
            "description": "Contract from the client",
            "schema": {
              "$ref": "#/definitions/contract"
            }
          },
          "404": {
            "description": "When the contract was not found"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/contractIdentifier"
          }
        ]
      },
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Make changes to a contract",
        "description": "You have the possibility to make changes to a contract, at least on the EnCo platform as you can't change something on the blockchain. You can change the contract name, this won't have impact on the reference of the contract on the chain. If you decide to 'change' the contract code by providing new source code/data & ABI or import an existing one providing a contract address, we will change the reference to another contract (and address) on the chain.",
        "responses": {
          "200": {
            "description": "Updated contract",
            "schema": {
              "$ref": "#/definitions/contract"
            }
          },
          "400" : {
            "description": "If a contract with the same name already exists or an invalid name is provided. If the fromAddress is not managed by EnCo for this user"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/contractIdentifier"
          },
          {
            "$ref": "#/parameters/deploy"
          },
          {
            "schema": {
              "$ref": "#/definitions/contractDeployRequest"
            },
            "name": "Contract payload",
            "in": "body",
            "description": "Contract deploy request"
          }
        ]
      },
      "delete": {
        "tags": [
          "Contracts"
        ],
        "summary": "Delete a contract",
        "description": "Delete the specified contract from the EnCo platform. Please note that your contract will not be removed from the blockchain.\nThe deletion is definite and can't be reverted (unlike the wallet deletion, where it's possible to unarchive). If you want to add this contract to the EnCo platform again, you can always reimport it.",
        "responses": {
          "200": {
            "description": "Contract deleted"
          },
          "404" : {
            "description": "If the contract can not be found"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/chainName"
        },
        {
          "$ref": "#/parameters/contractIdentifier"
        }
      ]
    },
    "/chains/{chainName}/contracts/{contractName}/swagger": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Create swagger for specified contract",
        "description": "We at EnCo provide a way to invoke a smart contract function through our API.\nUse this resource to generate the swagger file (describing all possible endpoints) for the specified contract.",
        "responses": {
          "200": {
            "description": "Swagger file in JSON format describing endpoints to invoke this contract",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Contract could not be found"
          },
          "500": {
            "description": "Internal server error while providing swagger"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/chainName"
        },
        {
          "$ref": "#/parameters/contractIdentifier"
        }
      ]
    },
    "/chains/{chainName}/contracts/{contractName}/{functionName}": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Invoke a contract function",
        "description": "Use this resource to invoke a smart contract function. Please provide the function arguments in the request body as a JSON where the field name is the argument name and the value is the argument value.",
        "responses": {
          "200": {
            "description": "Return value of the function invocation. If any.",
            "schema": {
              "type": "string"
            }
          },
          "202": {
            "description": "Transaction hash of a non-view and non-pure function invocation"
          },
          "400": {
            "description": "Function arguments could not be parsed or do not correspond with a function's input arguments"
          },
          "404": {
            "description": "Contract or function could not be found"
          },
          "500": {
            "description": "Internal server error while invoking function"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/chainName"
        },
        {
          "$ref": "#/parameters/contractIdentifier"
        },
        {
          "$ref": "#/parameters/functionName"
        },
        {
          "name": "Function args",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/functionArguments"
          }
        },
        {
          "in": "query",
          "name": "walletIdentifier",
          "required": false,
          "type": "string",
          "description": "The name or address of a wallet"
        },
        {
          "in": "query",
          "name": "gasPrice",
          "required": false,
          "type": "integer",
          "description": "Gas price in WEI"
        },
        {
          "in": "query",
          "name": "gasLimit",
          "required": false,
          "type": "integer",
          "description": "Gas limit in WEI"
        },
        {
          "in": "query",
          "name": "value",
          "required": false,
          "type": "integer",
          "description": "Value"
        }
      ]
    },
    "/chains/{chainName}/contracts/{contractName}/estimates/{functionName}": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Estimate the cost of calling a contract function",
        "description": "Call this resource to get an estimation of the fees you have to pay to invoke a certain function of a smart contract.",
        "responses": {
          "200": {
            "description": "Returns a gas estimation",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Function arguments could not be parsed or do not correspond with a function's input arguments"
          },
          "404": {
            "description": "Contract of function could not be found"
          },
          "500": {
            "description": "Internal server error while invoking function"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/chainName"
        },
        {
          "$ref": "#/parameters/contractIdentifier"
        },
        {
          "$ref": "#/parameters/functionName"
        },
        {
          "name": "Function args",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/functionArguments"
          }
        },
        {
          "in": "query",
          "name": "walletIdentifier",
          "required": false,
          "type": "string",
          "description": "The name or address of a wallet"
        },
        {
          "in": "query",
          "name": "value",
          "required": false,
          "type": "integer",
          "description": "Value"
        }
      ]
    },
    "/autocomplete/chains": {
      "get": {
        "tags": [
          "Autocomplete"
        ],
        "summary": "Autocomplete resource for chains",
        "responses": {
          "200": {
            "description": "All supported public chains and all private chains from the client",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "the name of the chains that match the query"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/text"
          }
        ]
      }
    },
    "/autocomplete/chains/{chainId}/wallets": {
      "get": {
        "tags": [
          "Autocomplete"
        ],
        "summary": "Autocomplete resource for wallets",
        "responses": {
          "200": {
            "description": "All wallet names for the given chain from the client",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "the name of the wallets that match the query"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/text"
          }
        ]
      }
    },
    "/autocomplete/chains/{chainId}/contracts": {
      "get": {
        "tags": [
          "Autocomplete"
        ],
        "summary": "Autocomplete resource for contracts",
        "responses": {
          "200": {
            "description": "All contract names for the given chain from the client",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "the name of the contracts that match the query"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/text"
          }
        ]
      }
    },
    "/autocomplete/chains/{chainId}/contracts/{contractName}/methods": {
      "get": {
        "tags": [
          "Autocomplete"
        ],
        "summary": "Autocomplete resource for contract methods",
        "responses": {
          "200": {
            "description": "All method fields for the given chain and contract from the client",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/autocompleteResponse"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/contractName"
          },
          {
            "$ref": "#/parameters/text"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/{hexString}": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Retrieve info about a transaction, address or block",
        "description": "Use this resource to retrieve information about a transaction, address (wallet or contract) or block.\nPlease provide the hash of these entities.",
        "responses": {
          "200": {
            "description": "The block, transaction or address if one can be found",
            "schema": {
              "$ref": "#/definitions/explorerEntity"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/hexString"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/blocks": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Retrieve info about certain blocks",
        "description": "Use this resource to request information about certain blocks. You can specify which block(s) in the query parameters. If not query parameter is provided, the latest block will be returned.",
        "responses": {
          "200": {
            "description": "Returns blocks based on optional start number and optional count",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/explorerBlock"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/start"
          },
          {
            "$ref": "#/parameters/count"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/blocks/{blockHash}": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Retrieve info about a specific block",
        "description": "Use this resource to request information about a specific block. Please make sure you provide the block hash, this is not the same as the block number.",
        "responses": {
          "200": {
            "description": "Returns block based for block hash",
            "schema": {
              "$ref": "#/definitions/explorerBlock"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/blockHash"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/blocks/{blockHash}/transactions": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Retrieve info about transactions in a specific block",
        "description": "Use this resource to request all transactions in a specific block. Please make sure you provide the block hash, this is not the same as the block number.",
        "responses": {
          "200": {
            "description": "Returns all transactions in a block",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/explorerTransaction"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/blockHash"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/transactions": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Return info about transactions you made via the EnCo platform",
        "description": "Use this resource to request information about the latest x transactions related to your managed wallets and contracts.",
        "responses": {
          "200": {
            "description": "Returns transactions that originated from your managed wallets or contracts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/explorerTransaction"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/status"
          },
          {
            "$ref": "#/parameters/walletOrContractIdentifier"
          },
          {
            "$ref": "#/parameters/contracts"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/transactions/{transactionHash}": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Retrieve info about a specific transaction",
        "description": "Use this resource to retrieve transaction information. This could be a transfer, contract deploy or invocation.",
        "responses": {
          "200": {
            "description": "Returns a transaction by its hash",
            "schema": {
              "$ref": "#/definitions/explorerTransaction"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/transactionHash"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/addresses/{address}": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Retrieve info about a specific address",
        "description": "Use this resource to retrieve address information. The address you have to provide can be either a normal (wallet) address or a contract address.",
        "responses": {
          "200": {
            "description": "Returns info related to an address",
            "schema": {
              "$ref": "#/definitions/explorerAddress"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/address"
          }
        ]
      }
    },
    "/chains/{chainName}/explorer/addresses/{address}/transactions": {
      "get": {
        "tags": [
          "Block explorer"
        ],
        "summary": "Retrieve info about transactions related to an address",
        "description": "Use this resource to retrieve all transactions related to an address. This could be a normal (wallet) address or a contract address.",
        "responses": {
          "200": {
            "description": "Returns all transactions related to an address",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/explorerTransaction"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/chainName"
          },
          {
            "$ref": "#/parameters/address"
          }
        ]
      }
    }
  },
  "parameters": {
    "transactionHash": {
      "name": "transactionHash",
      "in": "path",
      "description": "A hex string representing a transaction hash",
      "required": true,
      "type": "string"
    },
    "address": {
      "name": "address",
      "in": "path",
      "description": "An address or name of a wallet or contract",
      "required": true,
      "type": "string"
    },
    "walletOrContractIdentifier": {
      "name": "walletOrContractIdentifier",
      "in": "query",
      "description": "The address of a wallet or contract. This can also be the name of a managed wallet or contract",
      "required": false,
      "type": "string"
    },
    "contracts": {
      "name": "contracts",
      "in": "query",
      "description": "Whether or not to include transactions that originated from a contract. The default value is false",
      "required": false,
      "type": "boolean"
    },
    "start": {
      "name": "start",
      "in": "query",
      "description": "The number of the first block. If not provided, the latest blocks are returned",
      "required": false,
      "type": "integer"
    },
    "count": {
      "name": "count",
      "in": "query",
      "description": "The number of blocks to return",
      "required": false,
      "type": "integer"
    },
    "status": {
      "name": "status",
      "in": "query",
      "description": "An optional filter to only retrieve transactions which are MINED, PENDING or QUEUED",
      "required": false,
      "type": "string"
    },
    "hexString": {
      "name": "hexString",
      "in": "path",
      "description": "A hex string representing a block hash, a transaction hash or an address",
      "required": true,
      "type": "string"
    },
    "blockHash": {
      "name": "blockHash",
      "in": "path",
      "description": "A hex string representing a block hash",
      "required": true,
      "type": "string"
    },
    "functionName": {
      "name": "functionName",
      "in": "path",
      "description": "Name of the function",
      "required": true,
      "type": "string"
    },
    "contractName": {
      "name": "contractName",
      "in": "path",
      "description": "Name of the contract stored",
      "required": true,
      "type": "string"
    },
    "contractIdentifier": {
      "name": "contractIdentifier",
      "in": "path",
      "description": "Name or address of the contract stored",
      "required": true,
      "type": "string"
    },
    "chainName": {
      "name": "chainName",
      "in": "path",
      "description": "The name of the public or private chain",
      "required": true,
      "type": "string"
    },
    "balanceUnit": {
      "name": "balanceUnit",
      "in": "query",
      "description": "The display unit of the balance",
      "required": false,
      "default": "WEI",
      "type": "string",
      "enum": [
        "WEI",
        "KWEI",
        "MWEI",
        "GWEI",
        "SZABO",
        "FINNEY",
        "ETHER",
        "KETHER",
        "METHER",
        "GETHER"
      ]
    },
    "walletIdentifier": {
      "name": "walletIdentifier",
      "in": "path",
      "description": "The address or name of the wallet",
      "required": true,
      "type": "string"
    },
    "walletAddress": {
      "name": "walletAddress",
      "in": "path",
      "description": "The address of the wallet",
      "required": true,
      "type": "string"
    },
    "transactionId": {
      "name": "transactionId",
      "in": "path",
      "description": "The id of a transaction, also called transaction hash",
      "required": true,
      "type": "string"
    },
    "deploy": {
      "name": "deploy",
      "in": "query",
      "description": "Set this to false when the contract is already on the chain and you just want to import it to the EnCo platform",
      "required": false,
      "default": true,
      "type": "boolean"
    },
    "fundingAmount": {
      "name": "amount",
      "in": "query",
      "description": "The amount of ETH to send, must be a natural number [0-20]",
      "required": true,
      "type": "integer"
    },
    "text": {
      "name": "text",
      "in": "query",
      "description": "The query text to autocomplete",
      "required": true,
      "type": "string"
    },
    "newWalletName": {
      "name": "name",
      "in": "query",
      "description": "The name of the new wallet",
      "required": false,
      "type": "string"
    }
  },
  "definitions": {
    "functionArguments": {
      "title": "Function arguments",
      "description": "Arguments needed to invoke the function.",
      "type": "string"
    },
    "wallet": {
      "title": "Wallet",
      "type": "object",
      "properties": {
        "chainName": {
          "type": "string",
          "description": "Name of the chain on which this wallet resides"
        },
        "name": {
          "type": "string",
          "description": "Name of the wallet"
        },
        "address": {
          "type": "string",
          "description": "Address of the wallet"
        },
        "transactionCount": {
          "type": "integer",
          "description": "Amount of transactions made by this wallet"
        },
        "balance": {
          "type": "number",
          "format": "double",
          "description": "Balance amount of the wallet"
        }
      },
      "example": {
        "name": "MyEncoWallet",
        "address": "0xEF6f40FD760D11B950c6481555150F9a6A66ec0b",
        "transactionCount": 5,
        "balance": 13.37
      }
    },
    "basicWallet": {
      "title": "Basic wallet",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the wallet"
        },
        "address": {
          "type": "string",
          "description": "Address of the wallet"
        }
      },
      "example": {
        "name": "MyEncoWallet",
        "address": "0xEF6f40FD760D11B950c6481555150F9a6A66ec0b"
      }
    },
    "renameWallet": {
      "title": "Wallet rename",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new name of the wallet"
        }
      },
      "example": {
        "name": "MyRenamedWalletName"
      }
    },
    "publicPrivateKeyPair": {
      "title": "Key pair",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address"
        },
        "privateKey": {
          "type": "string",
          "description": "The private key"
        }
      },
      "example": {
        "address": "0x0eD9e544Db729D793a9f64C2B38bEAFFED185a9F",
        "privateKey": "0f140555fbbff8696c6f85108d730a7b1f473a230b194f201dd3d7d6cbbf23ca"
      }
    },
    "exportedWallet": {
      "title": "Exported wallet",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address"
        },
        "password": {
          "type": "string",
          "description": "The password to unlock to wallet file"
        },
        "walletFile": {
          "type": "string",
          "description": "The wallet file"
        }
      },
      "example": {
        "address": "0x0eD9e544Db729D793a9f64C2B38bEAFFED185a9F",
        "password": "AES/ECB/PKCS7Padding:256:ajksci77ll05id8fuWA7IA==",
        "walletFile": "{\"address\":\"0ed9e544db729d793a9f64c2b38beaffed185a9f\",\"id\":\"61764146-730b-4e79-9ac5-7c43eac065b4\",\"version\":3,\"crypto\":{\"cipher\":\"aes-128-ctr\",\"ciphertext\":\"cab3dc0f4380f6ecf4d215ac113cb77cb4e4ac6be38c97d5c541c9fe4a7e0cc5\",\"cipherparams\":{\"iv\":\"53db9d6a583457c47038e091e0c1ee39\"},\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"n\":4096,\"p\":6,\"r\":8,\"salt\":\"e6f528411c27ba5e9acff4ad7ca1d1a92bfbcfb54e0893fd316426c822a1dd89\"},\"mac\":\"2036804ee418ae54fe1822d7fcc92e3bc218b73d7d793c58e94c813b554c5e6d\"}}"
      }
    },
    "transfer": {
      "title": "Transfer",
      "type": "object",
      "required": [
        "to",
        "amount"
      ],
      "properties": {
        "to": {
          "type": "string",
          "description": "Address of the receiver. This can also be the name of a wallet, if that wallet is managed by EnCo for this user"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "The amount to transfer"
        },
        "unit": {
          "type": "string",
          "description": "Unit of the amount to transfer",
          "default": "WEI",
          "enum": [
            "WEI",
            "KWEI",
            "MWEI",
            "GWEI",
            "SZABO",
            "FINNEY",
            "ETHER",
            "KETHER",
            "METHER",
            "GETHER"
          ]
        },
        "gasPrice": {
          "type": "integer",
          "description": "Custom gasprice in WEI"
        },
        "gasLimit": {
          "type": "integer",
          "description": "Custom gaslimit in WEI"
        }
      },
      "example": {
        "to": "0x0508c6ae8b097ceabb49b8713445d6fabc13caeb",
        "amount": 13.37,
        "unit": "ETHER",
        "gasPrice": 1000000000,
        "gasLimit": 21000
      }
    },
    "transferUpdate": {
      "title": "Transfer update",
      "type": "object",
      "properties": {
        "gasPrice": {
          "type": "integer"
        },
        "gasLimit": {
          "type": "integer"
        }
      },
      "example": {
        "gasPrice": 1000000000,
        "gasLimit": 21000
      }
    },
    "transactionHash": {
      "title": "Transaction Hash",
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "description": "The transactionhash"
        }
      },
      "example": {
        "transactionId": "0x2e197447da518c91a64431666f37eeaab3fd1674592e91cdf472dfa167788488"
      }
    },
    "transaction": {
      "title": "Transaction",
      "type": "object",
      "properties": {
        "transactionHash": {
          "type": "string",
          "description": "The transaction hash"
        },
        "fromAddress": {
          "type": "string",
          "description": "The address of the sender of the transaction"
        },
        "toAddress": {
          "type": "string",
          "description": "The address of the recipient of the transaction"
        },
        "value": {
          "type": "integer",
          "description": "The value (in WEI) of the transaction"
        },
        "nonce": {
          "type": "integer",
          "description": "The transaction count (incremental) of the sender"
        },
        "gasLimit": {
          "type": "integer",
          "description": "The gas limit (in WEI) of the transaction"
        },
        "gasPrice": {
          "type": "integer",
          "description": "The gas price (in WEI) of the transaction"
        }
      },
      "example": {
        "transactionId": "0x2e197447da518c91a64431666f37eeaab3fd1674592e91cdf472dfa167788488",
        "fromAddress": "0x1fe0e6661227ce5e5583c206100341325f855732",
        "toAddress": "0x0508c6ae8b097ceabb49b8713445d6fabc13caeb",
        "nonce": 1,
        "gasLimit" : 21000,
        "gasPrice": 1000000000,
        "value": 1337000000000000000
      }
    },
    "contractDeployRequest": {
      "title": "Contract deploy/import",
      "type": "object",
      "required": [
        "fromAddress",
        "contractName"
      ],
      "description": "Must contain either source code OR abi & data. If solidity is given, data and ABI will always be overwritten.",
      "properties": {
        "contractAddress" : {
          "type": "string",
          "description": "Should be specified when the contract is already on the chain and the 'deploy' request param is false"
        },
        "fromAddress": {
          "type": "string",
          "description": "Could also be the name of an EnCo managed wallet"
        },
        "data": {
          "type": "string"
        },
        "abi": {
          "type": "string"
        },
        "contractName": {
          "type": "string"
        },
        "sourceCode": {
          "type": "string"
        },
        "gasPrice": {
          "type": "integer",
          "description": "Custom gasprice in WEI"
        },
        "gasLimit": {
          "type": "integer",
          "description": "Custom gaslimit in WEI"
        }
      }
    },
    "contract": {
      "title": "Contract info",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "abi": {
          "type": "string"
        },
        "origin": {
          "type": "string",
          "description": "The wallet address that deployed this contract"
        }
      }
    },
    "chain": {
      "title": "Chain",
      "type": "object",
      "properties": {
        "chain": {
          "type": "string",
          "description": "Name of the chain"
        },
        "public": {
          "type": "boolean",
          "description": "Whether the chain is public or private"
        }
      },
      "example": {
        "chain":"rinkeby",
        "public": true
      }
    },
    "autocompleteResponse": {
      "title": "Autocomplete response",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "value":{
            "type": "string"
          },
          "optionalFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/cloeVisualField"
            }
          },
          "mandatoryFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/cloeVisualField"
            }
          }
        }
      }
    },
    "cloeVisualField": {
      "title": "Function arg name and type",
      "type": "object",
      "properties": {
        "name":{
          "type": "string"
        },
        "type":{
          "type": "string"
        }
      }
    },
    "explorerEntity": {
      "title": "Explorer entity",
      "type": "object",
      "properties": {
        "entity": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "number": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "address": {
          "type": "string"
        },
        "isContract": {
          "type": "boolean"
        },
        "balance": {
          "type": "double"
        },
        "contractCreator": {
          "type": "string"
        },
        "contractCreation": {
          "type": "string"
        },
        "blockHash": {
          "type": "string"
        },
        "blockNumber": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "isFromContract": {
          "type": "boolean"
        },
        "to": {
          "type": "string"
        },
        "isToContract": {
          "type": "boolean"
        },
        "value": {
          "type": "integer"
        },
        "gasLimit": {
          "type": "integer"
        },
        "gasPrice": {
          "type": "integer"
        },
        "gasUsed": {
          "type": "integer"
        },
        "nonce": {
          "type": "integer"
        },
        "data": {
          "type": "string"
        }
      }
    },
    "explorerTransaction": {
      "title": "Explorer transaction",
      "type": "object",
      "properties": {
        "entity": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "blockHash": {
          "type": "string"
        },
        "blockNumber": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "isFromContract": {
          "type": "boolean"
        },
        "to": {
          "type": "string"
        },
        "isToContract": {
          "type": "boolean"
        },
        "value": {
          "type": "integer"
        },
        "gasLimit": {
          "type": "integer"
        },
        "gasPrice": {
          "type": "integer"
        },
        "gasUsed": {
          "type": "integer"
        },
        "nonce": {
          "type": "integer"
        },
        "data": {
          "type": "string"
        }
      }
    },
    "explorerAddress": {
      "title": "Explorer address",
      "type": "object",
      "properties": {
        "entity": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "isContract": {
          "type": "boolean"
        },
        "balance": {
          "type": "double"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contractCreator": {
          "type": "string"
        },
        "contractCreation": {
          "type": "string"
        }
      }
    },
    "explorerBlock": {
      "title": "Explorer block",
      "type": "object",
      "properties": {
        "entity": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "number": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}